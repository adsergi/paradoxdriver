/*
 * Copyright (C) 2009 Leonardo Alves da Costa
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
 * later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
 * License for more details. You should have received a copy of the GNU General Public License along with this
 * program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.googlecode.paradox;

import com.googlecode.paradox.exceptions.ParadoxDataException;
import com.googlecode.paradox.exceptions.ParadoxNotSupportedException;
import com.googlecode.paradox.exceptions.ParadoxSyntaxErrorException;
import com.googlecode.paradox.parser.SQLParser;
import com.googlecode.paradox.parser.nodes.StatementNode;
import com.googlecode.paradox.planner.Plan;
import com.googlecode.paradox.planner.Planner;
import com.googlecode.paradox.planner.plan.SelectPlan;
import com.googlecode.paradox.utils.Constants;
import com.googlecode.paradox.utils.Utils;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * JDBC statement implementation.
 *
 * @version 1.2
 * @since 1.0
 */
class ParadoxStatement implements Statement {

    /**
     * The Paradox connection.
     */
    protected ParadoxConnection connection;
    /**
     * Statement list.
     */
    protected final List<StatementNode> statements = new ArrayList<>();
    /**
     * ResultSet list.
     */
    protected final List<ResultSet> resultSets = new ArrayList<>();
    /**
     * Result set concurrency.
     */
    protected final int resultSetConcurrency;
    /**
     * Result set type.
     */
    protected final int resultSetType;
    /**
     * Result set holdability.
     */
    private final int resultSetHoldability;
    /**
     * Auto generated keys.
     */
    protected int autoGeneratedKeys;
    /**
     * Result set index.
     */
    protected int resultSetIndex = -1;
    /**
     * Close on completion.
     */
    protected boolean closeOnCompletion;
    /**
     * If this statement is closed.
     */
    protected boolean closed;

    /**
     * The fetch direction.
     */
    private int fetchDirection = ResultSet.FETCH_FORWARD;

    /**
     * The fetch size.
     */
    private int fetchSize = 10;

    /**
     * The max field size.
     */
    private int maxFieldSize = Constants.MAX_STRING_SIZE;

    /**
     * The max rows.
     */
    protected int maxRows;

    /**
     * If this statement is pool capable.
     */
    private boolean canPool;

    /**
     * The query timeout.
     */
    private int queryTimeout;

    /**
     * Creates a statement.
     *
     * @param connection the paradox connection.
     */
    ParadoxStatement(final ParadoxConnection connection, final int resultSetType, final int resultSetConcurrency,
                     final int resultSetHoldability) {
        this.connection = connection;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
        this.autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
    }

    protected int[] executeStatements() throws SQLException {
        // Close all existing result sets.
        for (final ResultSet rs : resultSets) {
            rs.close();
        }

        resultSets.clear();

        ArrayList<Integer> ret = new ArrayList<>();
        // One for statement.
        for (final StatementNode statement : statements) {
            final Plan plan = Planner.create(connection, statement);

            plan.execute(this.connection, maxRows, null);

            if (plan instanceof SelectPlan) {
                final ParadoxResultSet resultSet = new ParadoxResultSet(this.connection, this,
                        ((SelectPlan) plan).getValues(), ((SelectPlan) plan).getColumns());
                resultSet.setFetchDirection(ResultSet.FETCH_FORWARD);
                resultSet.setType(resultSetType);
                resultSet.setConcurrency(resultSetConcurrency);
                ret.add(Statement.SUCCESS_NO_INFO);
                resultSets.add(resultSet);
            }
        }

        int[] values = new int[ret.size()];
        for (int loop = 0; loop < ret.size(); loop++) {
            values[loop] = ret.get(loop);
        }

        return values;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void addBatch(final String sql) throws SQLException {
        final SQLParser parser = new SQLParser(connection, sql);
        this.statements.addAll(parser.parse());
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void cancel() {
        // Nothing to do here.
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void clearBatch() {
        this.statements.clear();
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void clearWarnings() {
        // Not used.
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void close() throws SQLException {
        for (final ResultSet rs : resultSets) {
            rs.close();
        }

        this.resultSets.clear();
        this.statements.clear();

        this.closed = true;
        this.connection = null;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void closeOnCompletion() {
        this.closeOnCompletion = true;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean execute(final String sql) throws SQLException {
        final SQLParser parser = new SQLParser(connection, sql);
        statements.addAll(parser.parse());

        executeStatements();

        return getMoreResults();
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
        throw new ParadoxNotSupportedException(ParadoxNotSupportedException.Error.OPERATION_NOT_SUPPORTED);
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
        throw new ParadoxNotSupportedException(ParadoxNotSupportedException.Error.OPERATION_NOT_SUPPORTED);
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean execute(final String sql, final String[] columnNames) throws SQLException {
        throw new ParadoxNotSupportedException(ParadoxNotSupportedException.Error.OPERATION_NOT_SUPPORTED);
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int[] executeBatch() throws SQLException {
        return executeStatements();
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public ResultSet executeQuery(final String sql) throws SQLException {
        final SQLParser parser = new SQLParser(connection, sql);

        statements.addAll(parser.parse());

        executeStatements();

        if (getMoreResults()) {
            return getResultSet();
        }

        throw new ParadoxSyntaxErrorException(ParadoxSyntaxErrorException.Error.INVALID_SELECT_STATEMENT);
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int executeUpdate(final String sql) throws SQLException {
        throw new ParadoxNotSupportedException(ParadoxNotSupportedException.Error.OPERATION_NOT_SUPPORTED);
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int executeUpdate(final String sql, final int autoGeneratedKeys) {
        return 0;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int executeUpdate(final String sql, final int[] columnIndexes) {
        return 0;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int executeUpdate(final String sql, final String[] columnNames) {
        return 0;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public Connection getConnection() {
        return this.connection;
    }

    @Override
    public int getFetchDirection() throws SQLException {
        final ResultSet resultSet = getResultSet();
        if (resultSet != null) {
            return resultSet.getFetchDirection();
        }

        return fetchDirection;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void setFetchDirection(int direction) throws SQLException {
        final ResultSet resultSet = getResultSet();
        if (resultSet != null) {
            resultSet.setFetchDirection(direction);
        }

        this.fetchDirection = direction;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int getFetchSize() throws SQLException {
        final ResultSet resultSet = getResultSet();
        if (resultSet != null) {
            return resultSet.getFetchSize();
        }

        return fetchSize;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void setFetchSize(int fetchSize) throws SQLException {
        final ResultSet resultSet = getResultSet();
        if (resultSet != null) {
            resultSet.setFetchSize(fetchSize);
        }

        this.fetchSize = fetchSize;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public ResultSet getGeneratedKeys() {
        return new ParadoxResultSet(this.connection, this, new ArrayList<>(), new ArrayList<>());
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int getMaxFieldSize() {
        return this.maxFieldSize;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void setMaxFieldSize(final int max) throws SQLException {
        if (max > Constants.MAX_STRING_SIZE) {
            throw new ParadoxDataException(ParadoxDataException.Error.INVALID_FIELD_SIZE);
        }

        this.maxFieldSize = max;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int getMaxRows() {
        return this.maxRows;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void setMaxRows(final int max) {
        this.maxRows = max;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean getMoreResults() {
        if (resultSetIndex < resultSets.size()) {
            resultSetIndex++;
        }

        return resultSetIndex < resultSets.size();
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean getMoreResults(int current) throws SQLException {
        switch (current) {
            case Statement.CLOSE_CURRENT_RESULT:
                ResultSet currentResult = getResultSet();
                if (currentResult != null) {
                    currentResult.close();
                }
                break;

            case Statement.CLOSE_ALL_RESULTS:
                for (final ResultSet rs : resultSets) {
                    rs.close();
                }
                break;

            default:
                // Do nothing.
                break;
        }

        return getMoreResults();
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int getQueryTimeout() {
        return this.queryTimeout;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void setQueryTimeout(final int seconds) {
        this.queryTimeout = seconds;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public ResultSet getResultSet() {
        if (resultSetIndex != -1 && resultSetIndex < resultSets.size()) {
            return resultSets.get(resultSetIndex);
        }

        return null;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int getResultSetConcurrency() throws SQLException {
        final ResultSet resultSet = getResultSet();
        if (resultSet != null) {
            return resultSet.getConcurrency();
        }

        return resultSetConcurrency;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int getResultSetHoldability() {
        return resultSetHoldability;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int getResultSetType() throws SQLException {
        final ResultSet resultSet = getResultSet();
        if (resultSet != null) {
            return resultSet.getType();
        }

        return resultSetType;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public int getUpdateCount() {
        return -1;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public SQLWarning getWarnings() {
        return null;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean isClosed() {
        return this.closed;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean isCloseOnCompletion() {
        return closeOnCompletion;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean isPoolable() {
        return this.canPool;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void setPoolable(final boolean canPool) {
        this.canPool = canPool;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public boolean isWrapperFor(final Class<?> iFace) {
        return Utils.isWrapperFor(this, iFace);
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void setEscapeProcessing(final boolean enable) {
        // Nothing to do here.
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public <T> T unwrap(final Class<T> iFace) throws SQLException {
        return Utils.unwrap(this, iFace);
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public void setCursorName(final String name) throws ParadoxNotSupportedException {
        throw new ParadoxNotSupportedException(ParadoxNotSupportedException.Error.OPERATION_NOT_SUPPORTED);
    }
}
